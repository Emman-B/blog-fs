# OpenAPI specification (basic structure based off this: https://swagger.io/docs/specification/basic-structure/)
openapi: 3.0.0
info:
  title: blog-fs OpenAPI Specification
  version: 0.1.0
# Paths
paths:
  /v1/:
    get:
      # no security reason: hello world test endpoint does not need security
      security: []
      summary: Returns a hello world message.
      responses:
        '200':    # status code
          description: A hello world string
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
  /v1/blogposts:
    get:
      tags:
        - Blog Posts
      # no security reason: public blogposts are available without authentication
      #   (some blogposts will need authentication though, but it's not a requirement of this route)
      security: []
      summary: Retrieves blog posts
      responses:
        '200':
          description: All of the blog posts including content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlogPost'
    post:
      tags:
        - Blog Posts
      summary: Creates a new blog post
      requestBody:
        description: This is the blog post that the client wants to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewBlogPost'
      responses:
        '201':
          description: The blog post has successfully been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'

        '401':
          description: User may not be logged in
  /v1/blogposts/{id}:
    get:
      tags:
        - Blog Posts
      # no security reason: public/unlisted blogposts are available with a link without authentication
      #   (some blogposts will need authentication though, but it's not a requirement of this route)
      security: []
      parameters:
        - in: path
          name: id # ID of blog post
          required: true
          schema:
            type: string
            format: uuid
          description: the UUID of the blogpost
      summary: Retrieves 1 blog post by UUID
      responses:
        '200':
          description: Blog post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
        '401':
          description: Authentication is required
        '404':
          description: Blog post was not found (can also be used for links to private blog posts)
    put:
      tags:
        - Blog Posts
      # ID parameter for identifying the blogpost to update
      parameters:
        - in: path
          name: id # ID of blog post
          required: true
          schema:
            type: string
            format: uuid
          description: the UUID of blogpost to edit
      # Request Body containing the updated properties
      requestBody:
        description: This is the blog post that the client wants to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatedBlogPost'
      summary: Updates an existing blogpost
      
      responses:
        '200':
          description: The blog post with the updated information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
        '401':
          description: Not authorized to update blog post (not the author)
        '404':
          description: Blog post was not found
      

  /v1/user:
    get:
      tags:
        - User Accounts
      summary: Retrieves the logged-in user's public information (which can be used to check for log-in state)
      responses:
        '200':
          description: The base log in information of the current logged in user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        
        '401':
          description: User may not be logged in

  /v1/user/signup:
    post:
      tags:
        - User Accounts
      # no security reason: user is trying to make an account in the first place
      security: []
      summary: Creates a new user account
      requestBody:
        description: This is the new user account information provided by the client
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      
      responses:
        '201':
          description: A new user account has been made. Basic details are returned (username and email)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: The password confirmation is incorrect
          content:
            text/plain; charset=utf-8:
              schema:
                type: string
        '409':
          description: There is an account with either an existing username or an existing email. The conflicting item(s) is shown below
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  
  /v1/user/login:
    post:
      tags:
        - User Accounts
      # no security reason: user is trying to log into an existing account
      security: []
      summary: Log into an account
      requestBody:
        description: This is the user account information that the client is trying to log into
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailOrUsername:
                  type: string
                password:
                  type: string
      
      responses:
        '200':
          description: client has successfully logged in
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/User' # user details
                  - type: string # simple "you have logged in" message
        
        '401':
          description: bad email or password
  
  /v1/user/logout:
    delete:
      tags:
        - User Accounts
      summary: If a user is logged-in, this will log a user out
      responses:
        '200':
          description: Log out is successful
          content:
            text/plain; charset=utf-8:
              schema:
                type: string

        '401':
          description: User may not be logged in
              
    

# Components
components:
  # Cookie Authentication Scheme (see: https://swagger.io/docs/specification/authentication/cookie-authentication/)
  securitySchemes:
    cookieAuth:           # arbitrary name for the security scheme
      type: apiKey
      in: cookie
      name: accessToken   # name of the cookie

  schemas:
    # Schema for a single blog post
    BlogPost:
      type: object
      # list of required properties
      required:
        - id
        - author
        - title
        - permissions
        - publishDate
        - updatedDate
        - content

      properties:
        id:
          type: string
          format: uuid
        author:
          type: string
        title:
          type: string
        permissions:
          type: string
          example: 'public'
          anyOf:
            - pattern: 'public'
            - pattern: 'users'
            - pattern: 'unlisted'
            - pattern: 'private'
            - pattern: 'draft'
        publishDate:
          type: string
          format: date-time
        updatedDate:
          type: string
          format: date-time
        content:
          type: string
    # Schema for creating a new blog post
    NewBlogPost:
      type: object
      required:
        - title
        - content
      
      properties:
        title:
          type: string
        content:
          type: string
        # Setting permissions
        permissions:
          type: string
          anyOf:
            - pattern: 'public'
            - pattern: 'users'
            - pattern: 'unlisted'
            - pattern: 'private'
            - pattern: 'draft'

    # Schema for updating an existing blog post (like NewBlogPost but no required properties)
    UpdatedBlogPost:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        # Setting permissions
        permissions:
          type: string
          anyOf:
            - pattern: 'public'
            - pattern: 'users'
            - pattern: 'unlisted'
            - pattern: 'private'
            - pattern: 'draft'
    # Schema for user account info (nothing private/personal)
    User:
      type: object
      required:
        - username
        - email
      
      properties:
        username:
          type: string
        email:
          type: string
          format: email
    # Schema for new user account
    NewUser:
      type: object
      required:
        - username
        - email
        - password
        - passwordConfirmation
      
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        passwordConfirmation:
          type: string

# Apply security scheme to all endpoints
security:
  - cookieAuth: []
